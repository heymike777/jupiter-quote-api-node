/* tslint:disable */
/* eslint-disable */
/**
 * Jupiter API v6
 * The core of [jup.ag](https://jup.ag). Easily get a quote and swap through Jupiter API.  ### Rate Limit We update our rate limit from time to time depending on the load of our servers. We recommend running your own instance of the API if you want to have high rate limit, here to learn how to run the [self-hosted API](https://station.jup.ag/docs/apis/self-hosted).  ### API Wrapper - Typescript [@jup-ag/api](https://github.com/jup-ag/jupiter-quote-api-node)  ### Data types - Public keys are base58 encoded strings - raw data such as Vec<u8\\> are base64 encoded strings 
 *
 * The version of the OpenAPI document: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AggregatorSwapResponseDynamicSlippageReport } from './AggregatorSwapResponseDynamicSlippageReport';
import {
    AggregatorSwapResponseDynamicSlippageReportFromJSON,
    AggregatorSwapResponseDynamicSlippageReportFromJSONTyped,
    AggregatorSwapResponseDynamicSlippageReportToJSON,
} from './AggregatorSwapResponseDynamicSlippageReport';
import type { AggregatorSwapResponsePrioritizationType } from './AggregatorSwapResponsePrioritizationType';
import {
    AggregatorSwapResponsePrioritizationTypeFromJSON,
    AggregatorSwapResponsePrioritizationTypeFromJSONTyped,
    AggregatorSwapResponsePrioritizationTypeToJSON,
} from './AggregatorSwapResponsePrioritizationType';
import type { AggregatorSwapResponseSimulationError } from './AggregatorSwapResponseSimulationError';
import {
    AggregatorSwapResponseSimulationErrorFromJSON,
    AggregatorSwapResponseSimulationErrorFromJSONTyped,
    AggregatorSwapResponseSimulationErrorToJSON,
} from './AggregatorSwapResponseSimulationError';

/**
 * 
 * @export
 * @interface AggregatorSwapResponse
 */
export interface AggregatorSwapResponse {
    /**
     * Base64 encoded transaction bytes
     * @type {string}
     * @memberof AggregatorSwapResponse
     */
    swapTransaction: string;
    /**
     * 
     * @type {number}
     * @memberof AggregatorSwapResponse
     */
    lastValidBlockHeight: number;
    /**
     * 
     * @type {number}
     * @memberof AggregatorSwapResponse
     */
    prioritizationFeeLamports: number;
    /**
     * 
     * @type {number}
     * @memberof AggregatorSwapResponse
     */
    computeUnitLimit: number;
    /**
     * 
     * @type {AggregatorSwapResponsePrioritizationType}
     * @memberof AggregatorSwapResponse
     */
    prioritizationType?: AggregatorSwapResponsePrioritizationType;
    /**
     * 
     * @type {AggregatorSwapResponseDynamicSlippageReport}
     * @memberof AggregatorSwapResponse
     */
    dynamicSlippageReport?: AggregatorSwapResponseDynamicSlippageReport;
    /**
     * 
     * @type {AggregatorSwapResponseSimulationError}
     * @memberof AggregatorSwapResponse
     */
    simulationError?: AggregatorSwapResponseSimulationError;
}

/**
 * Check if a given object implements the AggregatorSwapResponse interface.
 */
export function instanceOfAggregatorSwapResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "swapTransaction" in value;
    isInstance = isInstance && "lastValidBlockHeight" in value;
    isInstance = isInstance && "prioritizationFeeLamports" in value;
    isInstance = isInstance && "computeUnitLimit" in value;

    return isInstance;
}

export function AggregatorSwapResponseFromJSON(json: any): AggregatorSwapResponse {
    return AggregatorSwapResponseFromJSONTyped(json, false);
}

export function AggregatorSwapResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregatorSwapResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'swapTransaction': json['swapTransaction'],
        'lastValidBlockHeight': json['lastValidBlockHeight'],
        'prioritizationFeeLamports': json['prioritizationFeeLamports'],
        'computeUnitLimit': json['computeUnitLimit'],
        'prioritizationType': !exists(json, 'prioritizationType') ? undefined : AggregatorSwapResponsePrioritizationTypeFromJSON(json['prioritizationType']),
        'dynamicSlippageReport': !exists(json, 'dynamicSlippageReport') ? undefined : AggregatorSwapResponseDynamicSlippageReportFromJSON(json['dynamicSlippageReport']),
        'simulationError': !exists(json, 'simulationError') ? undefined : AggregatorSwapResponseSimulationErrorFromJSON(json['simulationError']),
    };
}

export function AggregatorSwapResponseToJSON(value?: AggregatorSwapResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'swapTransaction': value.swapTransaction,
        'lastValidBlockHeight': value.lastValidBlockHeight,
        'prioritizationFeeLamports': value.prioritizationFeeLamports,
        'computeUnitLimit': value.computeUnitLimit,
        'prioritizationType': AggregatorSwapResponsePrioritizationTypeToJSON(value.prioritizationType),
        'dynamicSlippageReport': AggregatorSwapResponseDynamicSlippageReportToJSON(value.dynamicSlippageReport),
        'simulationError': AggregatorSwapResponseSimulationErrorToJSON(value.simulationError),
    };
}

